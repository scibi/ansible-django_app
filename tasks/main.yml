---

- name: git_checkout__register_status
  debug:
    msg: '{{ git_checkout__register_status }}'


- name: 'Change shell to /bin/bash'
  user:
    name: '{{ django_app_user }}'
    shell: '/bin/bash'

- name: Install required packages
  apt:
    name: '{{ item }}'
    state: 'present'
    install_recommends: False
  with_flattened:
    - '{{ django_app_packages_base }}'
    - '{{ django_app_packages }}'
    - '{{ django_app_packages_postgresql[django_app_enable_postgresql] }}'
    - '{{ django_app_packages_npm[django_app_grunt_tasks != False] }}'
    - '{{ django_app_packages_gettext[django_app_enable_gettext] }}'
    - '{{ django_app_packages_python27[ django_app__python == "python2.7"] }}'
  tags: [ 'role::django_app:base_install' ]

- name: Install Python packages
  pip:
    requirements: '{{ django_app_app_path }}/{{ item }}'
    virtualenv: '{{ django_app_venv_path }}'
    virtualenv_python: '{{ django_app__python }}'
  become_user: '{{ django_app_user }}'
  with_items: '{{ django_app_requirements_files }}'
  when: '{{ django_app_requirements_type == "requirements.txt" }}'

- name: Run setup.py
  pip:
    name: '.'
    chdir: '{{ django_app_django_path }}'
    editable: True
    virtualenv: '{{ django_app_venv_path }}'
  become_user: '{{ django_app_user }}'
  when: '{{ django_app_requirements_type == "setup.py" }}'


- name: Create required directories          
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: '{{ django_app_user }}'
    group: '{{ django_app_group }}'
    mode: '0755'
  with_items:
    - '{{ django_app_log_path }}'
    - '{{ django_app_run_path }}'
    - '{{ django_app_static_path }}'
    - '{{ django_app_root_path }}/conf.d'
    - '{{ django_app_root_path }}/bin'
- name: Install custom systemd unit files
  template:
    src: '{{ item }}.j2'
    dest: '/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items:
    - 'etc/systemd/system/gunicorn@.service'
  notify:
    - 'Reload systemd'

- name: Create systemd instance config directory
  file:
    path: '/etc/systemd/system/gunicorn@{{ django_app_name }}.service.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Install custom systemd instance config
  template:
    src: 'etc/systemd/system/gunicorn@instance.service.d/instance.conf.j2'
    dest: '/etc/systemd/system/gunicorn@{{ django_app_name }}.service.d/{{ django_app_name }}.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: django_app_register_install_systemd_instance_config
  notify:
    - 'Reload systemd'

- name: Reload systemd
  command: systemctl daemon-reload
  when: django_app_register_install_systemd_instance_config.changed

- name: Install gunicorn instance config
  template:
    src: 'app/{{ item }}.j2'
    dest: '{{ django_app_root_path }}/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify:
    - 'Restart gunicorn service'
  with_items:
    - 'conf.d/virtualenv.conf'
    - 'conf.d/secret.conf'
    - 'conf.d/environment.conf'
    - 'conf.d/database.conf'
    - '.profile'
    - '.bashrc'

- name: Install configuration scripts
  template:
    src: 'app/{{ item }}.j2'
    dest: '{{ django_app_root_path }}/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0755'
  with_items:
    - 'bin/setup_django_env.sh'

- name: Enable systemd service
  service:
    name: 'gunicorn@{{ django_app_name }}'
    enabled: 'yes'
    state: 'started'

- include: static_files.yml

# Collecting static files

- name: Run migrations
  shell: '. {{ django_app_root_path }}/bin/setup_django_env.sh; python -m {{ django_app__manage_module }} migrate --noinput'
  args:
    chdir: '{{ django_app_django_path }}'
  become_user: '{{ django_app_user }}'
  register: django_app_register_migrate
  changed_when: not django_app_register_migrate.stdout_lines[-1]|match("^  No migrations to apply.*")|bool
  notify:
    - 'Restart gunicorn service'
  tags: [ 'role::django_app:migrate' ]

- name: Create super users
  shell: ". {{ django_app_root_path }}/bin/setup_django_env.sh; echo \"from django.contrib.auth.models import User; 'ok' if User.objects.filter(username__exact='{{ item.key }}').exists() else User.objects.create_superuser('{{ item.key }}', '{{ item.value }}', '{{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/django_app/' + django_app_name + '/users/' + item.key +' length=12 chars=ascii_letters,digits') }}')\" | python -m {{ django_app__manage_module }} shell"
  args:
    chdir: '{{ django_app_django_path }}'
  become_user: '{{ django_app_user }}'
  no_log: True
  with_dict: '{{ django_app_admin_users }}'
  register: django_app_register_create_super_users
  changed_when: "{{ not django_app_register_create_super_users.stdout_lines[0]|match(\">>> 'ok'\")|bool }}"
  tags: [ 'role::django_app:superusers' ]

- name: Compile messages
  shell: '. {{ django_app_root_path }}/bin/setup_django_env.sh; python -m {{ django_app__manage_module }} compilemessages'
  args:
    chdir: '{{ django_app_django_path }}'
  become_user: '{{ django_app_user }}'
  notify:
    - 'Restart gunicorn service'
  tags: [ 'role::django_app:gettext' ]
  when: '{{ django_app_enable_gettext }}'

# ZrestartowaÄ‡ gunicorna gdy: git_checkout__register_status[django_app_name]['changed']

- name: Restart gunicorn when app was updated
  service:
    name: 'gunicorn@{{ django_app_name }}'
    state: 'restarted'
  when: git_checkout__register_status[django_app_name]['changed']
