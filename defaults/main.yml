---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#

#django_app__name: False
django_app__version: 'master'
django_app__user: '{{ django_app__name }}'
django_app__group: '{{ django_app__user }}'

django_app__django_subdir: False

django_app__root_path: '{{ ansible_local.root.app + "/djangoapps/" + django_app__name }}'
django_app__app_path: '{{ django_app__root_path + "/app" }}'
django_app__venv_path: '{{ django_app__root_path + "/venv" }}'
django_app__src_path: '{{ django_app__root_path + "/src" }}'
django_app__log_path: '{{ django_app__root_path + "/log" }}'
django_app__run_path: '{{ django_app__root_path + "/run" }}'
django_app__static_path: '{{ django_app__root_path + "/static" }}'
django_app__django_path: '{{ django_app__app_path }}{% if django_app__django_subdir != False %}/{{ django_app__django_subdir }}{% endif %}'
        
django_app__secret_key: "{{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/django_app/' + django_app__name + '/secret length=48') }}"
django_app__environment:
  DJANGO_CONFIGURATION: 'Production'
  DJANGO_STATIC_ROOT: '{{ django_app__static_path }}'
  DJANGO_ALLOWED_HOSTS: '{{ ansible_fqdn }}'
django_app__environment_venv:
  VIRTUAL_ENV: '{{ django_app__venv_path }}'
  PATH: '{{ django_app__venv_path }}/bin:$PATH'

django_app__admin_users:
  admin: 'admin@{{ ansible_fqdn }}'

django_app__packages_base:
  - 'virtualenv'
  - 'python-pip'
  - 'build-essential'
django_app__packages: []
django_app__packages_postgresql:
  True: 
    - 'libpq-dev'
  False: []
django_app__packages_npm:
  True: 
    - 'nodejs'
    - 'npm'
  False: []
django_app__enable_postgresql: True
django_app__enable_gettext: True
django_app__packages_gettext:
  True: 
    - 'gettext'
  False: []
django_app__packages_python27:
  True:
    - 'python-dev'
  False:
    - 'python3-dev'

django_app__nginx_upstreams:
  - enabled: True
    name: 'django_app-{{ django_app__name }}'
    server: 'unix:{{ django_app__run_path }}/gunicorn.sock fail_timeout=0'

# fail_timeout=0 means we always retry an upstream even if it failed
# to return a good HTTP response (in case the Unicorn master nukes a
# single worker for timing out).
django_app__domains: [ '{{ ansible_fqdn }}' ]
django_app__nginix_proxy_options: |
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto https;
  proxy_set_header Host $http_host;
  proxy_redirect off;
  if (!-f $request_filename) {
    proxy_pass http://django_app-{{ django_app__name }};
    break;
  }
django_app__nginx_location_list_base:
  - pattern: '/'
    options: '{{ django_app__nginix_proxy_options }}'
  - pattern: '/static/'
    options: |
      alias   {{ django_app__static_path }}/;
django_app__nginx_location_list_additional: []
django_app__nginx_location_list: '{{ django_app__nginx_location_list_base + django_app__nginx_location_list_additional }}'

django_app__nginx_server:
  by_role: 'debops.django_app'
  enabled: True
  name: '{{ django_app__domains }}'

  location_list: '{{ django_app__nginx_location_list }}'
django_app__grunt_tasks: False

django_app__dependencies: True

# Possible values:
# - mysql
# - postgresql
# - sqlite3        
django_app__database: 'postgresql'
django_app__database_name: '{{ django_app__name }}'
django_app__database_user: '{{ django_app__name }}'
django_app__database_server: "{{ ansible_local[django_app__database].server }}"
django_app__database_port: "{{ ansible_local[django_app__database].port }}"
# .. envvar:: django_app__database_password_path
#
# Path to database password file.
django_app__database_password_path: "{{ secret + '/' + django_app__database + '/' +
                                    ansible_local[django_app__database].delegate_to }}{%
                                      if django_app__database=='postgresql' %}/{{ ansible_local[django_app__database].port }}{% endif
                                    %}{{ '/credentials/' + django_app__database_user +
                                    '/password' }}"

# .. envvar:: django_app__database_password
#
# Database password for the app.
django_app__database_password: "{{ lookup('password', django_app__database_password_path + ' length=48') }}"

# Possible values:
#  - requirements.txt
#  - setup.py
django_app__requirements_type: 'requirements.txt'
django_app__requirements_files: [ 'requirements.txt' ]
django_app__requirements_install: True
django_app__wsgi_module: 'wsgi'

django_app__manage_module: 'manage'
django_app__python: 'python2.7'        
